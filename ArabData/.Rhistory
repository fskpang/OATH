Z[,i]=scale(X[,i])
}
plot(colMeans(X), freq)
n=100
m=1000
X=matrix(0, n, m)
Z=matrix(0, n, m)
freq=runif(m, 0.1, 0.5)
for(i in 1:m)
{
X[,i]=rbinom(n, 2, freq[i])
Z[,i]=scale(X[,i])
}
plot(colMeans(X), freq)
chi=rchisq(10000, 1)
plot(sort(chi))
median(chi)
chi=rchisq(10000, 1)
median(chi)
plot(colMeans(X), freq)
chi=rchisq(10000, 1)
median(chi)
chi=rchisq(1000000, 1)
median(chi)
chi=rchisq(1000000, 1)
median(chi)
source("R/MyLib/shotgun.R")
Hong23h2(4.6, 0.00034, 1189, 1997)
Hong23h2(3.6, 0.00034, 1189, 1997)
source("~/R/MyLib/snpMatch.R")
source("~/R/MyLib/shotgun.R")
Hong23h2(4.6, 0.00034, 1189, 1997)
Hong23h2(4.6, 0.0034, 1189, 1997)
Hong23h2(4.6, 0.034, 1189, 1997)
Hong23h2(4.6, 0.00034, 1189, 1997)
Hong23h2(4.6, 0.0001, 1189, 1997)
Hong23h2(4.6, 0.00001, 1189, 1997)
Hong23h2(4.6, 0.000001, 1189, 1997)
set.seed(2016)
par(ps=10)
M = 3 #covariates
N = 200 #sample size
COL = c("red", "pink", "blue", "green")
#simu cov and phe
X = matrix(rnorm(M * N), nrow = N, ncol = M) #cov
Y = matrix(rnorm(N), nrow = N, ncol = 1) #phenotype
#standardization
X = apply(X, MARGIN = 2, scale)
Y = scale(Y)
#generic nss
Phi = cov(cbind(Y,X))
#simu loci
LC = 1
frq = runif(LC, 0, 0.5)
mk = matrix(0, nrow = N, ncol = LC)
for (i in 1:LC)
{
mk[,i] = rbinom(N, 2, frq[i])
}
layout(matrix(c(1:9), 3, 3))
#OATH vs sgwas
BETAmat = matrix(0, nrow = LC, ncol = 2)
for (IDX in 1:LC)
{
cv = var(X)
varMK = var(mk[,IDX])
#locus-specific nss
mmod = lm(Y ~ mk[,IDX])
nss1 = lm(X[,1] ~ mk[,IDX])
nss2 = lm(X[,2] ~ mk[,IDX])
nss3 = lm(X[,3] ~ mk[,IDX])
#A
A = c(summary(mmod)$coefficient[2,1],
Phi[1,2] / Phi[2,2], Phi[1,3] / Phi[3,3], Phi[1,4] / Phi[4,4])
#Lambda matrix
Lam = matrix(0, M + 1, M + 1)
for (i in 1:M)
{
Lam[i + 1, 2:(M + 1)] = cv[i,]
}
Lam[1,1] = varMK
Lam[1, 2] = Lam[2,1] = varMK * summary(nss1)$coefficient[2,1]
Lam[1, 3] = Lam[3,1] = varMK * summary(nss2)$coefficient[2,1]
Lam[1, 4] = Lam[4,1] = varMK * summary(nss3)$coefficient[2,1]
#Omega matrix
Omega = matrix(0, nrow = nrow(Lam), ncol = ncol(Lam))
diag(Omega) = diag(Lam)
for (i in 1:M)
{
md = combn(M, i)
for (j in 1:ncol(md))
{
xx = X[, md[,j]]
smod = lm(Y ~ mk[,IDX] + xx)
Sreg = summary(smod)$coefficients[2:(length(md[,j]) + 2),1] #partial reg coef
Ssd = summary(smod)$coefficients[2:(length(md[,j]) + 2),2] #partial reg coef sd
#joint estimate via OATH
lam = Lam[c(1, md[,j]+1), c(1, md[,j]+1)]
omega = Omega[c(1, md[,j]+1), c(1, md[,j]+1)]
a = A[c(1, md[,j]+1)]
B = solve(lam) %*% omega %*% a
SigmaB = sqrt(diag((Phi[1,1] - t(B) %*% omega %*% a)[1,1] * solve(lam) / (N - nrow(lam))))
####data illustration
#compare coef
plot(
B, Sreg, xlab = "OATH", ylab = "Saturated", bty =
'n', main = "", col=COL[c(1, md[,j]+1)], pch =
16, cex = 2, xlim=c(-0.2, 0.2), ylim=c(-0.2, 0.2)
)
#compare coef sd
for (k in 1:nrow(B))
{
lines(x = c(B[k,1] - SigmaB[k], B[k,1] + SigmaB[k]), y = c(B[k,1], B[k,1]))
}
for (k in 1:nrow(B))
{
lines(y = c(Sreg[k] - Ssd[k], Sreg[k] + Ssd[k]), x = c(Sreg[k], Sreg[k]))
}
#reference line
abline(a = 0, b = 1, lty = 2)
}
}
}
plot.new()
legend(
"topleft", legend = c("Locus", "Cov 1", "Cov 2", "Cov 3"), col = COL, pch =
16, bty = 'n'
)
var(y)
var(Y)
Y
t(Y) %*%(Y)
Phi
set.seed(2016)
par(ps=10)
M = 3 #covariates
N = 200 #sample size
COL = c("red", "pink", "blue", "green")
#simu cov and phe
X = matrix(rnorm(M * N), nrow = N, ncol = M) #cov
Y = matrix(rnorm(N), nrow = N, ncol = 1) #phenotype
#standardization
X = apply(X, MARGIN = 2, scale)
Y = scale(Y)
#generic nss
Phi = cov(cbind(Y,X))
#simu loci
LC = 1
frq = runif(LC, 0, 0.5)
mk = matrix(0, nrow = N, ncol = LC)
for (i in 1:LC)
{
mk[,i] = rbinom(N, 2, frq[i])
}
layout(matrix(c(1:9), 3, 3))
#OATH vs sgwas
BETAmat = matrix(0, nrow = LC, ncol = 2)
for (IDX in 1:LC)
{
cv = var(X)
varMK = var(mk[,IDX])
#locus-specific nss
mmod = lm(Y ~ mk[,IDX])
nss1 = lm(X[,1] ~ mk[,IDX])
nss2 = lm(X[,2] ~ mk[,IDX])
nss3 = lm(X[,3] ~ mk[,IDX])
#A
A = c(summary(mmod)$coefficient[2,1],
Phi[1,2] / Phi[2,2], Phi[1,3] / Phi[3,3], Phi[1,4] / Phi[4,4])
#Lambda matrix
Lam = matrix(0, M + 1, M + 1)
for (i in 1:M)
{
Lam[i + 1, 2:(M + 1)] = cv[i,]
}
Lam[1,1] = varMK
Lam[1, 2] = Lam[2,1] = varMK * summary(nss1)$coefficient[2,1]
Lam[1, 3] = Lam[3,1] = varMK * summary(nss2)$coefficient[2,1]
Lam[1, 4] = Lam[4,1] = varMK * summary(nss3)$coefficient[2,1]
#Omega matrix
Omega = matrix(0, nrow = nrow(Lam), ncol = ncol(Lam))
diag(Omega) = diag(Lam)
for (i in 1:M)
{
md = combn(M, i)
for (j in 1:ncol(md))
{
xx = X[, md[,j]]
smod = lm(Y ~ mk[,IDX] + xx)
Sreg = summary(smod)$coefficients[2:(length(md[,j]) + 2),1] #partial reg coef
Ssd = summary(smod)$coefficients[2:(length(md[,j]) + 2),2] #partial reg coef sd
#joint estimate via OATH
lam = Lam[c(1, md[,j]+1), c(1, md[,j]+1)]
omega = Omega[c(1, md[,j]+1), c(1, md[,j]+1)]
a = A[c(1, md[,j]+1)]
B = solve(lam) %*% omega %*% a
SigmaB = sqrt(diag((Phi[1,1]*n - t(B) %*% omega %*% a)[1,1] * solve(lam) / (N - nrow(lam))))
####data illustration
#compare coef
plot(
B, Sreg, xlab = "OATH", ylab = "Saturated", bty =
'n', main = "", col=COL[c(1, md[,j]+1)], pch =
16, cex = 2, xlim=c(-0.2, 0.2), ylim=c(-0.2, 0.2)
)
#compare coef sd
for (k in 1:nrow(B))
{
lines(x = c(B[k,1] - SigmaB[k], B[k,1] + SigmaB[k]), y = c(B[k,1], B[k,1]))
}
for (k in 1:nrow(B))
{
lines(y = c(Sreg[k] - Ssd[k], Sreg[k] + Ssd[k]), x = c(Sreg[k], Sreg[k]))
}
#reference line
abline(a = 0, b = 1, lty = 2)
}
}
}
plot.new()
legend(
"topleft", legend = c("Locus", "Cov 1", "Cov 2", "Cov 3"), col = COL, pch =
16, bty = 'n'
)
set.seed(2016)
par(ps=10)
M = 3 #covariates
N = 200 #sample size
COL = c("red", "pink", "blue", "green")
#simu cov and phe
X = matrix(rnorm(M * N), nrow = N, ncol = M) #cov
Y = matrix(rnorm(N), nrow = N, ncol = 1) #phenotype
#standardization
X = apply(X, MARGIN = 2, scale)
Y = scale(Y)
#generic nss
Phi = cov(cbind(Y,X))
#simu loci
LC = 1
frq = runif(LC, 0, 0.5)
mk = matrix(0, nrow = N, ncol = LC)
for (i in 1:LC)
{
mk[,i] = rbinom(N, 2, frq[i])
}
layout(matrix(c(1:9), 3, 3))
#OATH vs sgwas
BETAmat = matrix(0, nrow = LC, ncol = 2)
for (IDX in 1:LC)
{
cv = var(X)
varMK = var(mk[,IDX])
#locus-specific nss
mmod = lm(Y ~ mk[,IDX])
nss1 = lm(X[,1] ~ mk[,IDX])
nss2 = lm(X[,2] ~ mk[,IDX])
nss3 = lm(X[,3] ~ mk[,IDX])
#A
A = c(summary(mmod)$coefficient[2,1],
Phi[1,2] / Phi[2,2], Phi[1,3] / Phi[3,3], Phi[1,4] / Phi[4,4])
#Lambda matrix
Lam = matrix(0, M + 1, M + 1)
for (i in 1:M)
{
Lam[i + 1, 2:(M + 1)] = cv[i,]
}
Lam[1,1] = varMK
Lam[1, 2] = Lam[2,1] = varMK * summary(nss1)$coefficient[2,1]
Lam[1, 3] = Lam[3,1] = varMK * summary(nss2)$coefficient[2,1]
Lam[1, 4] = Lam[4,1] = varMK * summary(nss3)$coefficient[2,1]
#Omega matrix
Omega = matrix(0, nrow = nrow(Lam), ncol = ncol(Lam))
diag(Omega) = diag(Lam)
for (i in 1:M)
{
md = combn(M, i)
for (j in 1:ncol(md))
{
xx = X[, md[,j]]
smod = lm(Y ~ mk[,IDX] + xx)
Sreg = summary(smod)$coefficients[2:(length(md[,j]) + 2),1] #partial reg coef
Ssd = summary(smod)$coefficients[2:(length(md[,j]) + 2),2] #partial reg coef sd
#joint estimate via OATH
lam = Lam[c(1, md[,j]+1), c(1, md[,j]+1)]
omega = Omega[c(1, md[,j]+1), c(1, md[,j]+1)]
a = A[c(1, md[,j]+1)]
B = solve(lam) %*% omega %*% a
SigmaB = sqrt(diag((Phi[1,1]*N - t(B) %*% omega %*% a)[1,1] * solve(lam) / (N - nrow(lam))))
####data illustration
#compare coef
plot(
B, Sreg, xlab = "OATH", ylab = "Saturated", bty =
'n', main = "", col=COL[c(1, md[,j]+1)], pch =
16, cex = 2, xlim=c(-0.2, 0.2), ylim=c(-0.2, 0.2)
)
#compare coef sd
for (k in 1:nrow(B))
{
lines(x = c(B[k,1] - SigmaB[k], B[k,1] + SigmaB[k]), y = c(B[k,1], B[k,1]))
}
for (k in 1:nrow(B))
{
lines(y = c(Sreg[k] - Ssd[k], Sreg[k] + Ssd[k]), x = c(Sreg[k], Sreg[k]))
}
#reference line
abline(a = 0, b = 1, lty = 2)
}
}
}
plot.new()
legend(
"topleft", legend = c("Locus", "Cov 1", "Cov 2", "Cov 3"), col = COL, pch =
16, bty = 'n'
)
set.seed(2016)
par(ps=10)
M = 3 #covariates
N = 200 #sample size
COL = c("red", "pink", "blue", "green")
#simu cov and phe
X = matrix(rnorm(M * N), nrow = N, ncol = M) #cov
Y = matrix(rnorm(N), nrow = N, ncol = 1) #phenotype
#standardization
X = apply(X, MARGIN = 2, scale)
Y = scale(Y)
#generic nss
Phi = cov(cbind(Y,X))
#simu loci
LC = 1
frq = runif(LC, 0, 0.5)
mk = matrix(0, nrow = N, ncol = LC)
for (i in 1:LC)
{
mk[,i] = rbinom(N, 2, frq[i])
}
layout(matrix(c(1:9), 3, 3))
#OATH vs sgwas
BETAmat = matrix(0, nrow = LC, ncol = 2)
for (IDX in 1:LC)
{
cv = var(X)
varMK = var(mk[,IDX])
#locus-specific nss
mmod = lm(Y ~ mk[,IDX])
nss1 = lm(X[,1] ~ mk[,IDX])
nss2 = lm(X[,2] ~ mk[,IDX])
nss3 = lm(X[,3] ~ mk[,IDX])
#A
A = c(summary(mmod)$coefficient[2,1],
Phi[1,2] / Phi[2,2], Phi[1,3] / Phi[3,3], Phi[1,4] / Phi[4,4])
#Lambda matrix
Lam = matrix(0, M + 1, M + 1)
for (i in 1:M)
{
Lam[i + 1, 2:(M + 1)] = cv[i,]
}
Lam[1,1] = varMK
Lam[1, 2] = Lam[2,1] = varMK * summary(nss1)$coefficient[2,1]
Lam[1, 3] = Lam[3,1] = varMK * summary(nss2)$coefficient[2,1]
Lam[1, 4] = Lam[4,1] = varMK * summary(nss3)$coefficient[2,1]
#Omega matrix
Omega = matrix(0, nrow = nrow(Lam), ncol = ncol(Lam))
diag(Omega) = diag(Lam)
for (i in 1:M)
{
md = combn(M, i)
for (j in 1:ncol(md))
{
xx = X[, md[,j]]
smod = lm(Y ~ mk[,IDX] + xx)
Sreg = summary(smod)$coefficients[2:(length(md[,j]) + 2),1] #partial reg coef
Ssd = summary(smod)$coefficients[2:(length(md[,j]) + 2),2] #partial reg coef sd
#joint estimate via OATH
lam = Lam[c(1, md[,j]+1), c(1, md[,j]+1)]
omega = Omega[c(1, md[,j]+1), c(1, md[,j]+1)]
a = A[c(1, md[,j]+1)]
B = solve(lam) %*% omega %*% a
SigmaB = sqrt(diag((Phi[1,1] - t(B) %*% omega %*% a)[1,1] * solve(lam) / (N - nrow(lam))))
####data illustration
#compare coef
plot(
B, Sreg, xlab = "OATH", ylab = "Saturated", bty =
'n', main = "", col=COL[c(1, md[,j]+1)], pch =
16, cex = 2, xlim=c(-0.2, 0.2), ylim=c(-0.2, 0.2)
)
#compare coef sd
for (k in 1:nrow(B))
{
lines(x = c(B[k,1] - SigmaB[k], B[k,1] + SigmaB[k]), y = c(B[k,1], B[k,1]))
}
for (k in 1:nrow(B))
{
lines(y = c(Sreg[k] - Ssd[k], Sreg[k] + Ssd[k]), x = c(Sreg[k], Sreg[k]))
}
#reference line
abline(a = 0, b = 1, lty = 2)
}
}
}
plot.new()
legend(
"topleft", legend = c("Locus", "Cov 1", "Cov 2", "Cov 3"), col = COL, pch =
16, bty = 'n'
)
Ssd
smod
summary(Sreg)
summary(Sreg)
summary(smod)
a
setwd("~/manuscript/OpenGWAS/writeup/G3/ReviewDec/ArabData")
arg=commandArgs(TRUE)
par(ps=12)
#pdf(paste0(arg, ".pdf"), paper="a4")
rawDat=read.table("5_20010406HighMgK.txt", as.is=T)
pThreshold1=-log10(0.05/as.numeric(155764))
dimC=1
while(TRUE)
{
if((2^dimC-1)==nrow(rawDat)) break
dimC=dimC+1
}
modCnt=0
for(i in 1:dimC)
{
modCnt = modCnt+ncol(combn(dimC, i))
}
mat=matrix(0, modCnt, 5)
cnt=1
for(i in 1:dimC)
{
cb=combn(dimC, i)
for(j in 1:ncol(cb))
{
mat[cnt,cb[,j]] = 1
cnt=cnt+1
}
}
sortDat=rawDat[sort(rawDat$V8, index.return = TRUE)$ix,]
mode=matrix(0, modCnt, 5)
Str1=unlist(strsplit(sortDat$V1, ".oath"))
COL=c(1:5)
for(i in 1:modCnt)
{
subStr1=unlist(strsplit(Str1[i*2-1], "-"))
num=as.numeric(subStr1[length(subStr1)])
mode[i,]=mat[num,]
}
##########snp
layout(matrix(c(1,1,2,2,3,3,4,5,5), 9, 1))
par(mai=c(0.2, 1, 0.2, 0.5))
barplot(-log10(pnorm(-abs(sortDat$V8))*2), border = F, ylab=expression(paste(-log[10], "(p)")), col=ifelse(-log10(pnorm(-abs(sortDat$V8))*2) > pThreshold1, "grey30", "grey70"))
abline(h=pThreshold1, lty=2)
barplot(sortDat$V6, border=F, ylab=expression(beta), col=ifelse(-log10(pnorm(-abs(sortDat$V8))*2) > pThreshold1, "grey30", "grey70"))
barplot(sortDat$V7, border=F, ylab=expression(sigma[beta]), col=ifelse(-log10(pnorm(-abs(sortDat$V8))*2) > pThreshold1, "grey30", "grey70"))
mt=matrix(1, dimC, modCnt)
barplot(t(mode), border = FALSE, axes = F, col=(1:5))
axis(side=2, at=c(dimC/2), labels = c("Model"), tick = FALSE)
plot.new()
legend(ncol=3, "topleft", legend = paste("Cov", seq(1, 5)), col=c(1:5), pch=15, bty='n')
#dev.off()
plot.new(xlim=c(0, 1), ylim=c(0,1))
text(0.5, 0.2, expression(paste("Evaluation of the modeling for GWAS hits.\nThe 4 rows represent ", -log[10](italic(p)), ", ", lambda[GC], ", ", beta, ", and ", sigma[beta], " estimated under the models given covariates.")))
arg=commandArgs(TRUE)
par(ps=12)
#pdf(paste0(arg, ".pdf"), paper="a4")
rawDat=read.table("5_20010406HighMgK.txt", as.is=T)
pThreshold1=-log10(0.05/as.numeric(155764))
dimC=1
while(TRUE)
{
if((2^dimC-1)==nrow(rawDat)) break
dimC=dimC+1
}
modCnt=0
for(i in 1:dimC)
{
modCnt = modCnt+ncol(combn(dimC, i))
}
mat=matrix(0, modCnt, 5)
cnt=1
for(i in 1:dimC)
{
cb=combn(dimC, i)
for(j in 1:ncol(cb))
{
mat[cnt,cb[,j]] = 1
cnt=cnt+1
}
}
sortDat=rawDat[sort(rawDat$V8, index.return = TRUE)$ix,]
mode=matrix(0, modCnt, 5)
Str1=unlist(strsplit(sortDat$V1, ".oath"))
COL=c(1:5)
for(i in 1:modCnt)
{
subStr1=unlist(strsplit(Str1[i*2-1], "-"))
num=as.numeric(subStr1[length(subStr1)])
mode[i,]=mat[num,]
}
##########snp
layout(matrix(c(1,1,2,2,3,3,4,5,5), 9, 1))
par(mai=c(0.2, 1, 0.2, 0.5))
barplot(-log10(pnorm(-abs(sortDat$V8))*2), border = F, ylab=expression(paste(-log[10], "(p)")), col=ifelse(-log10(pnorm(-abs(sortDat$V8))*2) > pThreshold1, "grey30", "grey70"))
abline(h=pThreshold1, lty=2)
barplot(sortDat$V6, border=F, ylab=expression(beta), col=ifelse(-log10(pnorm(-abs(sortDat$V8))*2) > pThreshold1, "grey30", "grey70"))
barplot(sortDat$V7, border=F, ylab=expression(sigma[beta]), col=ifelse(-log10(pnorm(-abs(sortDat$V8))*2) > pThreshold1, "grey30", "grey70"))
mt=matrix(1, dimC, modCnt)
barplot(t(mode), border = FALSE, axes = F, col=(1:5))
axis(side=2, at=c(dimC/2), labels = c("Model"), tick = FALSE)
plot.new()
legend(ncol=3, "topleft", legend = paste("Cov", seq(1, 5)), col=c(1:5), pch=15, bty='n')
#dev.off()
